),
column(width = 9,
box(title = "OsPSYR2 Expression", width = 12,
plotOutput("plot2", width = "100%", height = "450px")
)
)
)
),
tabItem(tabName = "OsPSY4",
fluidRow(
box(title = "OsPSY4", width = 12, textOutput("my_text3")
),
column(width = 3,
box(title = "Value Range", width = 12, collapsible = TRUE,
sliderInput("value_range3", "Filter by Value:",
min = floor(min(0, na.rm = TRUE)),
max = ceiling(max(OsPSY4$value, na.rm = TRUE)),
value = c(floor(min(OsPSY4$value, na.rm = TRUE)),
ceiling(max(OsPSY4$value, na.rm = TRUE))),
step = 10
)
),
box(title = "Life Stages", width = 12, collapsible = TRUE, collapsed = TRUE,
checkboxGroupInput("selected_names3", "Life Stages:",
choices = unique(OsPSY4$name),
selected = unique(OsPSY4$name)
)
)
),
column(width = 9,
box(title = "OsPSY4 Expression", width = 12,
plotOutput("plot3", width = "100%", height = "450px")
)
)
)
),
tabItem(tabName = "Overall",
fluidRow(
box(title = "All 3 Genes", width = 12, textOutput("my_text4")
),
column(width = 3,
box(title = "Value Range", width = 12, collapsible = TRUE,
sliderInput("value_range4", "Filter by Value:",
min = floor(min(0, na.rm = TRUE)),
max = ceiling(max(combined_summary$mean_value, na.rm = TRUE)),
value = c(floor(min(combined_summary$mean_value, na.rm = TRUE)),
ceiling(max(combined_summary$mean_value, na.rm = TRUE))),
step = 10
)
),
box(title = "Life Stages", width = 12, collapsible = TRUE, collapsed = TRUE,
checkboxGroupInput("selected_names4", "Life Stages:",
choices = unique(combined_summary$name),
selected = unique(combined_summary$name)
)
)
),
column(width = 9,
box(title = "Expression Comparison", width = 12,
plotOutput("plot4", width = "100%", height = "450px")
)
),
box(title = "When would be the best time to collect if you want to see the most even staining?", width = 12, textOutput("my_text5")
),
column(width = 12,
box(title = "Best Stage for All 3 Genes", width = 12, align="center",
plotOutput("plot5", width = "500px", height = "450px")
)
)
)
)
)
)
)
server <- function(input, output, session) {
# Dash
output$my_text <- renderUI({
HTML( "<p><b> Introduction </b></p>
<p> This tiny website demonstrates the expression levels of 3 OsPSY genes in rice that we are trying to test with GUS staining! Each life stage has different levels of expression which we need to be aware of before GUS staining. This can allow us to confirm with previous data given by ePlant and so we can better explore the expression levels in that life stage. For example, in the previous round of GUS staining from EXP71, we stained that colepotile stage. The OsPSYR2 has the highest level of gene expression during that life stage which is consistent with the data given in ePlant, which can also be shown futher on the 'Overall' tab. Please explore the tabs and mess around with the selecters to extract the data you want to see!</p>
<p><b> Source of Data: ePlant and subsequent datasets </b></p>
"
)
})
# --- OsPSYR1 ---
output$my_text1 <- renderText({
"The OsPSYR1 Gene is found on the 7th chromosome. It overall has low levels of gene expression, with it's highest level being in the SAM. Though this level is much higher in this life stage than others, is is not as much as the other genes."
})
output$plot1 <- renderPlot({
req(input$selected_names1, input$value_range1)
filtered_data1 <- OsPSYR1 %>%
filter(name %in% input$selected_names1,
value >= input$value_range1[1],
value <= input$value_range1[2])
ggplot(filtered_data1, aes(x = name, y = value, colour = `Sample #`)) +
geom_jitter(show.legend = TRUE, na.rm = TRUE) +
coord_cartesian(ylim = c(min(0), max(input$value_range1))) +
scale_y_continuous(breaks = seq(0, 2000, by = 250)) +
scale_color_brewer(palette = "Dark2") +
theme_light() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1.2, color = "black"),
axis.text.y = element_text(angle = 0, hjust = 1.2, color = "black"),
legend.key.size = unit(0.5, "cm")
) +
labs(
title = "OsPSYR1",
x = "Life Stage",
y = "Value",
color = "Sample #"
)
})
# --- OsPSYR2 ---
output$my_text2 <- renderText({
"The OsPSYR2 gene has much higher levels of expression thoughout most life stages compared to the other genes. It is located on Chromosome 4."
})
output$plot2 <- renderPlot({
req(input$selected_names2, input$value_range2)
filtered_data2 <- OsPSYR2 %>%
filter(name %in% input$selected_names2,
value >= input$value_range2[1],
value <= input$value_range2[2])
ggplot(filtered_data2, aes(x = name, y = value, colour = `Sample #`)) +
geom_jitter(show.legend = TRUE, na.rm = TRUE) +
coord_cartesian(ylim = c(min(0), max(input$value_range2))) +
scale_y_continuous(breaks = seq(0, 5000, by = 1000)) +
scale_color_brewer(palette = "Dark2") +
theme_light() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1.2, color = "black"),
axis.text.y = element_text(angle = 0, hjust = 1.2, color = "black"),
legend.key.size = unit(0.5, "cm")
) +
labs(
title = "OsPSYR2",
x = "Life Stage",
y = "Value",
color = "Sample #"
)
})
# --- OsPSY4 ---
output$my_text3 <- renderText({
"The OsPSY4 gene has a moderate amount of expression and is located on Chromosome 1."
})
output$plot3 <- renderPlot({
req(input$selected_names3, input$value_range3)
filtered_data3 <- OsPSY4 %>%
filter(name %in% input$selected_names3,
value >= input$value_range3[1],
value <= input$value_range3[2])
ggplot(filtered_data3, aes(x = name, y = value, colour = `Sample #`)) +
geom_jitter(show.legend = TRUE, na.rm = TRUE) +
coord_cartesian(ylim = c(min(0), max(input$value_range3))) +
scale_y_continuous(breaks = seq(0, 3500, by = 500)) +
scale_color_brewer(palette = "Dark2") +
theme_light() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1.2, color = "black"),
axis.text.y = element_text(angle = 0, hjust = 1.2, color = "black"),
legend.key.size = unit(0.5, "cm")
) +
labs(
title = "OsPSY4",
x = "Life Stage",
y = "Value",
color = "Sample #"
)
})
# --- All Genes ---
output$my_text4 <- renderText({
"Here we can compare the all three genes by using the averages of all the samples from before. This graph is the most valuable when wanting to know how the expression levels will compare next to each other in the experiments we are conducting."
})
output$plot4 <- renderPlot({
req(input$selected_names4, input$value_range4)
filtered_data4 <- combined_summary %>%
filter(name %in% input$selected_names4,
mean_value >= input$value_range4[1],
mean_value <= input$value_range4[2])
ggplot(filtered_data4, aes(x = name, y = mean_value, fill = Gene)) +
geom_col(na.rm = TRUE, color = "grey50", position = position_dodge(width = 0.8), show.legend = TRUE) +
coord_cartesian(ylim = c(min(0), max(input$value_range4))) +
scale_y_continuous(breaks = seq(0, 5000, by = 1000)) +
scale_fill_brewer(palette = "Blues") +
theme_light() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1.2, color = "black"),
axis.text.y = element_text(angle = 0, hjust = 1.2, color = "black"),
legend.key.size = unit(0.5, "cm")
) +
labs(
title = "OsPSY Genes",
x = "Life Stage",
y = "Value (mean)"
)
})
output$my_text5 <- renderText({
"The best time would be one of these 6 options. Though this is not what we are explorign directly, it could be valuable information to understand if we stain the plants during these times and look in these anatomical parts!"
})
output$plot5 <- renderPlot({
combined_summary %>%
filter(name %in% c("Embryo", "InflorescenceP3", "InflorescenceP5", "Ovary", "SAM", "Seed_S1")) %>%
filter(mean_value >= 350) %>%
ggplot(aes(x=name, y=mean_value, fill=Gene))+
geom_col(show.legend=TRUE, color="grey50", na.rm = T, position = position_dodge(width = 0.8))+
coord_cartesian(ylim = c(min(combined_summary$mean_value), max(combined_summary$mean_value))) +
scale_y_continuous(breaks = c(0, 1000,2000, 3000, 4000, 5000))+
scale_fill_brewer(palette = "Blues")+
theme_light()+
theme(legend.position="right",
axis.text.x = element_text(angle = 45, hjust=1.2, color="black"),
axis.text.y = element_text(angle = 0, hjust=1.2, color="black"),
legend.key.size = unit(0.5, "cm"))+
labs(title = "Equal Amounts of Expression",
x = "Life Stage",
y= "Value (mean)")
})
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = FALSE)
knitr::opts_knit$set(root.dir = "/Users/mayaziebarth/Desktop/Ronald Lab/rice_app/rice")
ui <- dashboardPage(skin = "green",
dashboardHeader(title = "OsPSY Gene Expression in Rice", titleWidth = 330),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "Dashboard", icon = icon("dashboard")),
menuItem("OsPSYR1", tabName = "OsPSYR1"),
menuItem("OsPSYR2", tabName = "OsPSYR2"),
menuItem("OsPSY4", tabName = "OsPSY4"),
menuItem("Overall", tabName = "Overall")
)
),
dashboardBody(
tabItems(
tabItem(tabName = "Dashboard",
fluidPage(
box(title = "Overview", width = 12, uiOutput("my_text")),
box(width=12, img(src = "riceplant01.jpg", style = "display: block; margin-left: auto; margin-right: auto;"))
)
),
tabItem(tabName = "OsPSYR1",
fluidRow(
box(title = "OsPSYR1", width = 12, textOutput("my_text1")
),
column(width = 3,
box(title = "Value Range", width = 12, collapsible = TRUE,
sliderInput("value_range1", "Filter by Value:",
min = floor(min(0, na.rm = TRUE)),
max = ceiling(max(OsPSYR1$value, na.rm = TRUE)),
value = c(floor(min(OsPSYR1$value, na.rm = TRUE)),
ceiling(max(OsPSYR1$value, na.rm = TRUE))),
step = 10
)
),
box(title = "Life Stages", width = 12, collapsible = TRUE, collapsed = TRUE,
checkboxGroupInput("selected_names1", "Life Stages:",
choices = unique(OsPSYR1$name),
selected = unique(OsPSYR1$name)
)
)
),
column(width = 9,
box(title = "OsPSYR1 Expression", width = 12,
plotOutput("plot1", width = "100%", height = "450px")
)
)
)
),
tabItem(tabName = "OsPSYR2",
fluidRow(
box(title = "OsPSYR2", width = 12, textOutput("my_text2")
),
column(width = 3,
box(title = "Value Range", width = 12, collapsible = TRUE,
sliderInput("value_range2", "Filter by Value:",
min = floor(min(0, na.rm = TRUE)),
max = ceiling(max(OsPSYR2$value, na.rm = TRUE)),
value = c(floor(min(OsPSYR2$value, na.rm = TRUE)),
ceiling(max(OsPSYR2$value, na.rm = TRUE))),
step = 10
)
),
box(title = "Life Stages", width = 12, collapsible = TRUE, collapsed = TRUE,
checkboxGroupInput("selected_names2", "Life Stages:",
choices = unique(OsPSYR2$name),
selected = unique(OsPSYR2$name)
)
)
),
column(width = 9,
box(title = "OsPSYR2 Expression", width = 12,
plotOutput("plot2", width = "100%", height = "450px")
)
)
)
),
tabItem(tabName = "OsPSY4",
fluidRow(
box(title = "OsPSY4", width = 12, textOutput("my_text3")
),
column(width = 3,
box(title = "Value Range", width = 12, collapsible = TRUE,
sliderInput("value_range3", "Filter by Value:",
min = floor(min(0, na.rm = TRUE)),
max = ceiling(max(OsPSY4$value, na.rm = TRUE)),
value = c(floor(min(OsPSY4$value, na.rm = TRUE)),
ceiling(max(OsPSY4$value, na.rm = TRUE))),
step = 10
)
),
box(title = "Life Stages", width = 12, collapsible = TRUE, collapsed = TRUE,
checkboxGroupInput("selected_names3", "Life Stages:",
choices = unique(OsPSY4$name),
selected = unique(OsPSY4$name)
)
)
),
column(width = 9,
box(title = "OsPSY4 Expression", width = 12,
plotOutput("plot3", width = "100%", height = "450px")
)
)
)
),
tabItem(tabName = "Overall",
fluidRow(
box(title = "All 3 Genes", width = 12, textOutput("my_text4")
),
column(width = 3,
box(title = "Value Range", width = 12, collapsible = TRUE,
sliderInput("value_range4", "Filter by Value:",
min = floor(min(0, na.rm = TRUE)),
max = ceiling(max(combined_summary$mean_value, na.rm = TRUE)),
value = c(floor(min(combined_summary$mean_value, na.rm = TRUE)),
ceiling(max(combined_summary$mean_value, na.rm = TRUE))),
step = 10
)
),
box(title = "Life Stages", width = 12, collapsible = TRUE, collapsed = TRUE,
checkboxGroupInput("selected_names4", "Life Stages:",
choices = unique(combined_summary$name),
selected = unique(combined_summary$name)
)
)
),
column(width = 9,
box(title = "Expression Comparison", width = 12,
plotOutput("plot4", width = "100%", height = "450px")
)
),
box(title = "When would be the best time to collect if you want to see the most even staining?", width = 12, textOutput("my_text5")
),
column(width = 12,
box(title = "Best Stage for All 3 Genes", width = 12, align="center",
plotOutput("plot5", width = "500px", height = "450px")
)
)
)
)
)
)
)
server <- function(input, output, session) {
# Dash
output$my_text <- renderUI({
HTML( "<p><b> Introduction </b></p>
<p> This tiny website demonstrates the expression levels of 3 OsPSY genes in rice that we are trying to test with GUS staining! Each life stage has different levels of expression which we need to be aware of before GUS staining. This can allow us to confirm with previous data given by ePlant and so we can better explore the expression levels in that life stage. For example, in the previous round of GUS staining from EXP71, we stained that colepotile stage. The OsPSYR2 has the highest level of gene expression during that life stage which is consistent with the data given in ePlant, which can also be shown futher on the 'Overall' tab. Please explore the tabs and mess around with the selecters to extract the data you want to see!</p>
<p><b> Source of Data: ePlant and subsequent datasets </b></p>
"
)
})
# --- OsPSYR1 ---
output$my_text1 <- renderText({
"The OsPSYR1 Gene is found on the 7th chromosome. It overall has low levels of gene expression, with it's highest level being in the SAM. Though this level is much higher in this life stage than others, is is not as much as the other genes."
})
output$plot1 <- renderPlot({
req(input$selected_names1, input$value_range1)
filtered_data1 <- OsPSYR1 %>%
filter(name %in% input$selected_names1,
value >= input$value_range1[1],
value <= input$value_range1[2])
ggplot(filtered_data1, aes(x = name, y = value, colour = `Sample #`)) +
geom_jitter(show.legend = TRUE, na.rm = TRUE) +
coord_cartesian(ylim = c(min(0), max(input$value_range1))) +
scale_y_continuous(breaks = seq(0, 2000, by = 250)) +
scale_color_brewer(palette = "Dark2") +
theme_light() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1.2, color = "black"),
axis.text.y = element_text(angle = 0, hjust = 1.2, color = "black"),
legend.key.size = unit(0.5, "cm")
) +
labs(
title = "OsPSYR1",
x = "Life Stage",
y = "Value",
color = "Sample #"
)
})
# --- OsPSYR2 ---
output$my_text2 <- renderText({
"The OsPSYR2 gene has much higher levels of expression thoughout most life stages compared to the other genes. It is located on Chromosome 4."
})
output$plot2 <- renderPlot({
req(input$selected_names2, input$value_range2)
filtered_data2 <- OsPSYR2 %>%
filter(name %in% input$selected_names2,
value >= input$value_range2[1],
value <= input$value_range2[2])
ggplot(filtered_data2, aes(x = name, y = value, colour = `Sample #`)) +
geom_jitter(show.legend = TRUE, na.rm = TRUE) +
coord_cartesian(ylim = c(min(0), max(input$value_range2))) +
scale_y_continuous(breaks = seq(0, 5000, by = 1000)) +
scale_color_brewer(palette = "Dark2") +
theme_light() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1.2, color = "black"),
axis.text.y = element_text(angle = 0, hjust = 1.2, color = "black"),
legend.key.size = unit(0.5, "cm")
) +
labs(
title = "OsPSYR2",
x = "Life Stage",
y = "Value",
color = "Sample #"
)
})
# --- OsPSY4 ---
output$my_text3 <- renderText({
"The OsPSY4 gene has a moderate amount of expression and is located on Chromosome 1."
})
output$plot3 <- renderPlot({
req(input$selected_names3, input$value_range3)
filtered_data3 <- OsPSY4 %>%
filter(name %in% input$selected_names3,
value >= input$value_range3[1],
value <= input$value_range3[2])
ggplot(filtered_data3, aes(x = name, y = value, colour = `Sample #`)) +
geom_jitter(show.legend = TRUE, na.rm = TRUE) +
coord_cartesian(ylim = c(min(0), max(input$value_range3))) +
scale_y_continuous(breaks = seq(0, 3500, by = 500)) +
scale_color_brewer(palette = "Dark2") +
theme_light() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1.2, color = "black"),
axis.text.y = element_text(angle = 0, hjust = 1.2, color = "black"),
legend.key.size = unit(0.5, "cm")
) +
labs(
title = "OsPSY4",
x = "Life Stage",
y = "Value",
color = "Sample #"
)
})
# --- All Genes ---
output$my_text4 <- renderText({
"Here we can compare the all three genes by using the averages of all the samples from before. This graph is the most valuable when wanting to know how the expression levels will compare next to each other in the experiments we are conducting."
})
output$plot4 <- renderPlot({
req(input$selected_names4, input$value_range4)
filtered_data4 <- combined_summary %>%
filter(name %in% input$selected_names4,
mean_value >= input$value_range4[1],
mean_value <= input$value_range4[2])
ggplot(filtered_data4, aes(x = name, y = mean_value, fill = Gene)) +
geom_col(na.rm = TRUE, color = "grey50", position = position_dodge(width = 0.8), show.legend = TRUE) +
coord_cartesian(ylim = c(min(0), max(input$value_range4))) +
scale_y_continuous(breaks = seq(0, 5000, by = 1000)) +
scale_fill_brewer(palette = "Blues") +
theme_light() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1.2, color = "black"),
axis.text.y = element_text(angle = 0, hjust = 1.2, color = "black"),
legend.key.size = unit(0.5, "cm")
) +
labs(
title = "OsPSY Genes",
x = "Life Stage",
y = "Value (mean)"
)
})
output$my_text5 <- renderText({
"The best time would be one of these 6 options. Though this is not what we are explorign directly, it could be valuable information to understand if we stain the plants during these times and look in these anatomical parts!"
})
output$plot5 <- renderPlot({
combined_summary %>%
filter(name %in% c("Embryo", "InflorescenceP3", "InflorescenceP5", "Ovary", "SAM", "Seed_S1")) %>%
filter(mean_value >= 350) %>%
ggplot(aes(x=name, y=mean_value, fill=Gene))+
geom_col(show.legend=TRUE, color="grey50", na.rm = T, position = position_dodge(width = 0.8))+
coord_cartesian(ylim = c(min(combined_summary$mean_value), max(combined_summary$mean_value))) +
scale_y_continuous(breaks = c(0, 1000,2000, 3000, 4000, 5000))+
scale_fill_brewer(palette = "Blues")+
theme_light()+
theme(legend.position="right",
axis.text.x = element_text(angle = 45, hjust=1.2, color="black"),
axis.text.y = element_text(angle = 0, hjust=1.2, color="black"),
legend.key.size = unit(0.5, "cm"))+
labs(title = "Equal Amounts of Expression",
x = "Life Stage",
y= "Value (mean)")
})
}
shinyApp(ui = ui, server = server)
